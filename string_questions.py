# -*- coding: utf-8 -*-
"""String_Questions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cho-JvL-re8qhfNd5odIJ0LQfeB5Avdj

# **String Questions**

## **Reverse The given sting**
"""

arr=[2,3,4,5]
def fnd(arr):
  count=0
  n=len(arr)
  arr.sort()
  l=[i for i in range(1,n+1)]
  for i in range(n):
    if arr[i]!=l[i]:
      count+=arr[i]-l[i]
  return count
fnd(arr)

# Method 1
s="I like this program very much"
ans=""
n=len(s)
prev = n
for i in range(n - 1, -1, -1):
  if(s[i] == " "):
    ans += s[i + 1 : prev] + " "
    prev = i
ans += s[0 : prev]
print(ans)

# Method 2
s="I like this program very much"
ans=''
str_list=s.split(' ')
ans=" ".join(str_list[::-1])
print(ans)

# Method 3
s="I like this program very much"
ans=''
rans=''
rev_list=[]
str_list=s.split(' ')
for word in str_list:
  rev_list.append(word[::-1])
ans+=' '.join(str_list[::-1])
rans+=' '.join(rev_list[::-1])
print("Normal Reverse Order: ",ans)
print()
print("Reverse Word and sentence also Order: ",rans)

# Method 4
s="Madhudan"
r=reversed(s)
print("".join(r))

"""## **Reverse The Every Second word of given sting**"""

s="I like this program very much"
str_list=s.split(" ")
n=len(str_list)
ans=[]
for i in range(n):
  if i%2!=0:
    ans.append(str_list[i][::-1])
  else:
    ans.append(str_list[i])
print(' '.join(ans[::]))

"""
## **input: A3B4C1**
## **Output: ABC134**"""

s="Z3B4C1A10"
alphabet=[]
digit=[]
ans=''
for ch in s:
  if ch.isnumeric()==True:
   digit.append(ch)
  else:
    alphabet.append(ch)
alphabet.sort()
digit.sort()
for i in alphabet:
  ans+="".join(i)
for i in digit:
  ans+="".join(i)
print(ans)

s="Z3B4C1A5"
alphabet=[]
digit=[]
for ch in s:
  if ch.isnumeric()==True:
   digit.append(ch)
  else:
    alphabet.append(ch)
print(''.join(sorted(alphabet)+sorted(digit)))

"""## **input: a2b3c4**
## **output: aabbbcccc**
"""

s='a2b3c4'
ans=''
for i in range(len(s)):
  if s[i].isalpha():
    pass
  else:
    ans+=s[i-1]*int(s[i])
print(ans)

"""
## **input: aabbbcccc**
## **output: a2b3c4**"""

# Method 1
s='aabbbcccc'
remove_duplicate=list(set(s))
d={}
ans=''
for i in remove_duplicate:
  d[i]=s.count(i)
for k,v in d.items():
  ans+=k
  ans+=str(v)
print(ans)

#Method 2
s='aabbbccccd'
prev=s[0]
print(prev)
count=0
ans=''
for i in s:
  if i==prev:
    count+=1
  else:
    ans+=str(count)+prev
    prev=i
    count=1
ans+=str(count)+prev
print(ans)

"""## **input: a2b3**
## **output: acbe**
**Unicode a=98**

**Unicode A=65**
"""

s='a2b3'
ans=''
for i in s:
  if i.isalpha():
    ans+=i
    prev=i
  else:
    ans+=str(chr(ord(prev)+int(i)))
print(ans)

l=[1,2,3,[4,5,6]]
ans=[]
for i in l:
  if type(i)==list:
    ans.extend(i)
  else:
    ans.append(i)
print(ans)

"""## **Remove the duplicate character from string**"""

# Method 1
s='abbccdefghhh'
ans=''
prev=s[0]
ans+=prev
for ch in s:
  if ch==prev:
    pass
  else:
    ans+=ch
    prev=ch
print(ans)

# Method 2
s='abbccdefghhh'
ans=''
for ch in s:
  if ch not in ans:
    ans+=ch
print(ans)

# Method 3
s='abbccdefghhh'
ans=''
s1=set(s)
ans=''.join(s1)
print(ans)

"""## **Find the occurance of character**"""

# Method 1 with use of list
s='abbcceeeeddd'
l=[]
for ch in s:
  if ch not in l:
    l.append(ch)
for ch in l:
  print("{} occure {} times".format(ch,s.count(ch)))

# we need in sorted order then
s='abbzzzcceeeeddd'
l=[]
for ch in s:
  if ch not in l:
    l.append(ch)
for ch in sorted(l):
  print("{} occure {} times".format(ch,s.count(ch)))

# Method 2 Use of set
s='abbzzzcceeeeddd'
ans=set(s)
for ch in sorted(ans):
  print("{} occurs {} times".format(ch,s.count(ch)))

# Method 3 Use of Dictonary
s='abbccddd'
ans={}
for ch in s:
  if ch not in ans:
    ans[ch]=1
  else:
    ans[ch]+=1
print(ans)

# Method 4
s='ddabbcaaccbbd'
d={}
for ch in sorted(s):
  d[ch]=d.get(ch,0)+1
print(d)

# Method 5
# Dict Comprehancen
s='abbcccd'
ans={ch:s.count(ch) for ch in s}
print(ans)

"""## **Write a program to check string is anagram or not**

" Anagrams are a form of wordplay in which the letters of a word or phrase are rearranged to create a new word or phrase. For example, if you take the letters from the words “a gentleman,” you can rearrange them to spell “elegant man.” By rearranging “Clint Eastwood,” you can spell “old west action.” “William Shakespeare” can be rearranged to spell “I’ll make a wise phrase.” Anagrams are used in writing for a variety of purposes, including to provide humor, embed mystery, and create a new identity."
"""

s1='a gentleman'
s2='elegant man'
ans='Not Anagrams'
if sorted(s1)==sorted(s2):
  ans="Anagrams"
print(ans)

"""## **Check given string is palindrom or not**"""

s='level'
ans="Not Palindrome"
if s ==s[::-1]:
  ans="Palindrome"
print(ans)

"""## **s1=abcdefgh**
## **s2=xyz**
## **s3=12345**
## **output= ax1,by2,cz3,e5,f,g**
"""

s1="abcdefgh"
s2="xyz"
s3="12345"
i=j=k=0
while i<len(s1) or j<len(s2) or k<len(s3):
  ans=''
  if i<len(s1):
    ans+=s1[i]
    i+=1
  if j<len(s2):
    ans+=s2[j]
    j+=1
  if k<len(s3):
    ans+=s3[k]
    k+=1
  print(ans)

l=[1,2,3,4,5,6]
m=[10,20,30,40,50,60,70]
n=[]
i=j=0
while i<len(l) and j<len(m):
  n.append(l[i])
  n.append(m[j])
  i+=1
  j+=1
while i<len(l) and len(l)>len(m):
  n.append(l[i])
  i+=1
while j<len(m) and len(m)>len(l):
  n.append(m[j])
  j+=1
print(n)

"""## **Find The all permutation of given string**"""

def get_permutation(string, i=0):

    if i == len(string):
        print("".join(string))

    for j in range(i, len(string)):

        words = [c for c in string]

        # swap
        words[i], words[j] = words[j], words[i]

        get_permutation(words, i + 1)

get_permutation('abc')

def get_permutation(string, i=0):

    if i == len(string):
        print("".join(string))

    for j in range(i, len(string)):
        # swap
        string[i], string[j] = string[j], string[i]

        get_permutation(string, i + 1)
s=['a','b','c']
get_permutation(s)

# TC: O(!n)*O(n)
def get_permutation(arr, i=0):
    if i == len(arr):
        print(arr)

    for j in range(i, len(arr)):
        # swap
        arr[i], arr[j] = arr[j], arr[i]

        get_permutation(arr, i + 1)
arr=[1,2,3]
get_permutation(arr)

from itertools import permutations
s='abc'
words = [''.join(p) for p in permutations(s)]

print(words)

"""## **Longest Common Prefix**"""

# Method 1
# TC: O(len(str_list)*len(minimum word of str_list))

str_list=["flower","flow",'flight']

def find_prefix(str_list):
  ans=''
  n=min([len(words) for words in str_list])
  for i in range(n):
    for words in str_list:
      if str_list[0][i]!=words[i]:
        return ans
    ans+=str_list[0][i]
  return ans
print(find_prefix(str_list))

# Method 1
# TC: O(len(str_list)*len(minimum word of str_list))

str_list=["club",'clap','clove']

def find_max_prefix(str_list):
  ans=''
  new_str=sorted(str_list)
  first_str=new_str[0]
  last_str=new_str[len(new_str)-1]
  for i in range(len(first_str)):
    if first_str[i]!=last_str[i]:
      return ans
    ans+=first_str[i]
  return ans
find_max_prefix(str_list)

"""## **Largest Odd Number in String**"""

# TC : O(n)
num="3542786"
for i in range(len(num)-1,-1,-1):
  if int(num[i])%2!=0:
    print(num[0:i+1])
    break
else:
  print(" ")

"""## **Isomorphic Strings**
s='egg'

t='odd'

* we can replace s to t so its isomorphic strings

s='foo'

t='bar'

* we can not replace s to t so its not an isomorphic strings

"""

s='foo'
t='bar'
d={s[i]:t[i] for i in range(len(s))}
ans=''
for i in s:
  ans+=d[i]
if t==ans:
  print("Isomorphic")
else:
  print("Not Isomorphic")

s='foo'
t='bar'
def isomorphic_str(s,t):
  n=len(s)
  d1={}
  d2={}
  for i in range(n):
    ch1=s[i]
    ch2=t[i]
    if (ch1 in d1 and d1[ch1] != ch2) or (ch2 in d2 and d2[ch2]!=ch1) :
      return False
    else:
      d1[ch1]=ch2
      d2[ch2]=ch1
  return True
isomorphic_str(s,t)

"""
# **check whether one string is a rotation of another**"""

s1="abacd"
s2="cdab"
s=s1+s2
if len(s1)!=len(s2):
  print("Not Rotation")
elif s.count(s2)>=1:
  print("Rotation")
else:
  print("Not Rotation")

"""## **Sort Characters By Frequency**"""

# input : tree
# output : eert or eetr
s='tree'
d={}
for ch in s:
  d[ch]=d.get(ch,0)+1
res=''
for k,v in sorted(d.items()):
  res+=k*v
print(res)

"""## **Integer to Roman**"""

d={'M':1000,'CM':900,'D':500,'CD':400,'C':100,'XC':90,'L':50,'XL':40,'X':10,'IX':9,'V':5,"IV":4,"I":1}
num=3749
ans=''
for k,v in d.items():
  if num==0:
    break
  times=num//v
  num=num%v
  ans+=k*times
print(ans)

"""## **Roman to Integer**"""

s="MMMDCCXLIX"
num=0
d={'M':1000,'CM':900,'D':500,'CD':400,'C':100,'XC':90,'L':50,'XL':40,'X':10,'IX':9,'V':5,"IV":4,"I":1}
for i in range(len(s)):
    if i==len(s)-1:
      num+=d[s[i]]
      break
    elif d[s[i]]>=d[s[i+1]]:
      num+=d[s[i]]
    else:
      num=num-d[s[i]]

print(num)

"""## **Maximum Nesting Depth of Paranthesis**"""

s='(1+(2*3)+((8)/4))+1'
res=0
count=0
for i in s:
  if i=='(':
    count+=1
    if count>res:
      res=count
  elif i==')':
    count-=1
print(res)

"""##**Remove Outermost Parentheses**"""

s="(()) (()())"
count=0
ans=''
for pr in s:
  if pr=="(":
    if count!=0:
      ans+=pr
    count+=1

  elif pr==")" :
    count-=1
    if count!=0:
      ans+=pr


print(ans)

"""## **Implement Atoi**"""

s="-0012a42"
def myAtoi(s: str) -> int:
    res=0
    s=s.strip()
    n=len(s)
    if s=='':
      return res
    if s[0]=='-':
      sign=-1
    if s[0] in ['-','+']:
      s=s[1:n]
      n=n-1
    for i in range (n):
        if s[i].isdigit():
          res=res*10+int(s[i])
        else:
          break
    if res>=2**31:
      return 2**31
    if res<-2**31:
      return -2**31
    return res*sign
myAtoi(s)

"""## **Number of Distinct Substrings in a String**"""

s='abab'
n=len(s)
res=set()
for i in range(n):
  sub_str=''
  for j in range(i,n):
    sub_str+=s[j]
    res.add(sub_str)
print(res)
print(len(res)+1)

s='abab'
n=len(s)
res=[]
for i in range(n):
  sub_str=''
  for j in range(i,n):
    sub_str+=s[j]
    res.append(sub_str)
print(res)
print(len(res)+1)

"""## **Sum of Beauty of All Substrings**"""

s="aabcbaa"
ans=0
n=len(s)
set_ans=set()
ans=0
for i in range(n):
  sub_str=''
  for j in range(i,n):
    sub_str+=s[j]
    if len(sub_str)>=3:
      d=set(sub_str)
      l=[]
      for i in d:
        l.append(sub_str.count(i))
        mf=max(l)
        lf=min(l)
      ans+=mf-lf
print(ans)

"""## **Longest Palindrome**
* Of given stings subtring palindome



"""

s ="abccccdd"
n=len(s)
l=[]
ans=0
for i in range(n):
  sub_str=''
  for j in range(i,n):
    sub_str+=s[j]
    l.append(sub_str)
  for i in l:
    if i==i[::-1] and ans<len(i):
      len(i)
      ans=len(i)
print(ans)

"""## **Longest Palindrome**
* If char is even : Then is totaly use to form palindome
* If char count is oddd the we find how many are use to create palindrome
* Of given stings possible to create
"""

# TC : O(n)
# SC : O(n)
s="abccccdd"
char_set=set()
ans=0
for ch in s:
# Check char is present in char_set or not if presnt means the charcter is twise so add 2 in our ans
  if ch in char_set:
    ans+=2
    char_set.remove(ch)
  else:
    char_set.add(ch)
if len(char_set):
  ans+=1
print(ans)

# TC : O(n)
# SC : O(n)
s ="abccccdd"
d={}
ans=0
oddfreq=False
for ch in s:
  d[ch]=d.get(ch,0)+1
for k,v in d.items():
  if v%2==0:
    ans+=v
  else:
    ans+=v-1
    odd_freq=True
if odd_freq:
  ans+=1
print(ans)



















